const createAlbum = async (req, res) => {
  try {
    const {
      username,
      bandName,
      description,
      albumTitle,
      label,
      genres,
      released,
      type,
    } = req.body;

    const file1 = req.files.file[0];
    const file2 = req.files.file2[0];
    const file3 = req.files.file3[0];
    console.log(username);
    // console.log(title);
    console.log(description);
    console.log(genres);

    const blobName1 = uuidv4() + "-" + file1.originalname;
    const params1 = {
      Bucket: process.env.AWS_BUCKET_NAME,
      Key: blobName1,
      Body: file1.buffer,
      ContentType: file1.mimetype,
    };
    await s3.upload(params1).promise();
    const imageUrl1 = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${blobName1}`;

    // Przetwarzanie drugiego pliku i przesy≈Çanie do Azure Blob Storage
    const blobName2 = uuidv4() + "-" + file2.originalname;
    const params2 = {
      Bucket: process.env.AWS_BUCKET_NAME,
      Key: blobName2,
      Body: file2.buffer,
      ContentType: file2.mimetype,
    };
    await s3.upload(params2).promise();
    const imageUrl2 = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${blobName2}`;

    const blobName3 = uuidv4() + "-" + file3.originalname;
    // const blockBlobClient3 = containerClient.getBlockBlobClient(blobName3);
    // await blockBlobClient3.uploadData(file3.buffer, {
    //   blobHTTPHeaders: { blobContentType: file3.mimetype },
    // });
    // const imageUrl3 = blockBlobClient3.url;
    const params3 = {
      Bucket: process.env.AWS_BUCKET_NAME,
      Key: blobName3,
      Body: file3.buffer,
      ContentType: file3.mimetype,
    };
    await s3.upload(params3).promise();
    const imageUrl3 = `https://${process.env.AWS_BUCKET_NAME}.s3.${process.env.AWS_REGION}.amazonaws.com/${blobName3}`;

    const album = await Album.create({
      username,
      bandName,
      albumTitle,
      description,
      label,
      // imageUrl: imageUrl,
      imageUrlFront: imageUrl1,
      imageUrlBack: imageUrl2,
      imageUrlBandPic: imageUrl3,
      genres,
      released,
      type,
    });
    res.status(200).json(album);
  } catch (error) {
    // console.log(error);
    res.status(400).json({ error: error.message });
  }
};