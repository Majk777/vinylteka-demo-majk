const Album = require("../models/albumModels");
const mongoose = require("mongoose");

const { v4: uuidv4 } = require("uuid");
const { BlobServiceClient } = require("@azure/storage-blob");
const accountName = process.env.ACCOUNT_NAME;
const sasToken = process.env.SAS_TOKEN;
const containerName = process.env.CONTAINER_NAME;
const blobServiceClient = new BlobServiceClient(
  `https://${accountName}.blob.core.windows.net/?${sasToken}`
);
const containerClient = blobServiceClient.getContainerClient(containerName);

//                  AMAZON        S3          STORAGE
const AWS = require("aws-sdk");

const s3 = new AWS.S3({
  accessKeyId: process.env.AWS_ACCESS_KEY_ID,
  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  region: process.env.AWS_REGION,
});

const getAlbums = async (req, res) => {
  const albums = await Album.find({}).sort({ createdAt: -1 });

  res.status(200).json(albums);
};

const getAlbum = async (req, res) => {
  const { id } = req.params;

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(404).json({ error: "Error 404: found no result" });
  }

  const album = await Album.findById(id);

  if (!album) {
    return res.status(404).json({ error: "Error 404: found no result" });
  }

  res.status(200).json(album);
};

const deleteAlbum = async (req, res) => {
  const { id } = req.params;

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(404).json({ error: "Error 404: found no result" });
  }

  const album = await Album.findByIdAndDelete({ _id: id });

  if (!album) {
    return res.status(404).json({ error: "Error 404: found no result" });
  }

  res.status(200).json(album);
};

const createAlbum = async (req, res) => {
  // const { bandName, albumTitle, description, label, released, genres, type } =
  //   req.body;

  // try {
  //   const album = await Album.create({
  //     bandName,
  //     albumTitle,
  //     description,
  //     label,
  //     released,
  //     genres,
  //     type,
  //   });
  //   res.status(200).json(album);
  // } catch (error) {
  //   res.status(400).json({ error: error.message });
  // }
  try {
    const {
      username,
      bandName,
      description,
      albumTitle,
      label,
      genres,
      released,
      type,
    } = req.body;
    // const { username, title, description, genres } = req.body;
    // const image = req.file;
    const file1 = req.files.file[0];
    const file2 = req.files.file2[0];
    const file3 = req.files.file3[0];
    console.log(username);
    // console.log(title);
    console.log(description);
    console.log(genres);
    // console.log(image);

    // const blobName = uuidv4() + "-" + image.originalname;
    // const blockBlobClient = containerClient.getBlockBlobClient(blobName);
    // await blockBlobClient.uploadData(image.buffer, {
    //   blobHTTPHeaders: { blobContentType: image.mimetype },
    // });
    // const imageUrl = blockBlobClient.url;
    // Przetwarzanie pierwszego pliku i przesyłanie do Azure Blob Storage
    const blobName1 = uuidv4() + "-" + file1.originalname;
    const blockBlobClient1 = containerClient.getBlockBlobClient(blobName1);
    await blockBlobClient1.uploadData(file1.buffer, {
      blobHTTPHeaders: { blobContentType: file1.mimetype },
    });
    const imageUrl1 = blockBlobClient1.url;

    // Przetwarzanie drugiego pliku i przesyłanie do Azure Blob Storage
    const blobName2 = uuidv4() + "-" + file2.originalname;
    const blockBlobClient2 = containerClient.getBlockBlobClient(blobName2);
    await blockBlobClient2.uploadData(file2.buffer, {
      blobHTTPHeaders: { blobContentType: file2.mimetype },
    });
    const imageUrl2 = blockBlobClient2.url;

    const blobName3 = uuidv4() + "-" + file3.originalname;
    const blockBlobClient3 = containerClient.getBlockBlobClient(blobName3);
    await blockBlobClient3.uploadData(file3.buffer, {
      blobHTTPHeaders: { blobContentType: file3.mimetype },
    });
    const imageUrl3 = blockBlobClient3.url;

    const album = await Album.create({
      username,
      bandName,
      albumTitle,
      description,
      label,
      // imageUrl: imageUrl,
      imageUrlFront: imageUrl1,
      imageUrlBack: imageUrl2,
      imageUrlBandPic: imageUrl3,
      genres,
      released,
      type,
    });
    res.status(200).json(album);
  } catch (error) {
    // console.log(error);
    res.status(400).json({ error: error.message });
  }
};

const updateAlbum = async (req, res) => {
  const { id } = req.params;
  // const updatedAlbumData = req.body;
  const { usernameCommenting, comment } = req.body;
  // console.log(updatedAlbumData);
  console.log(id);

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(404).json({ error: "Error 404: found no result" });
  }

  try {
    // const album = await Album.findByIdAndUpdate(id, updatedAlbumData, {
    //   new: true,
    // });

    const album = await Album.findByIdAndUpdate(
      id,
      // { $push: { comments: { usernameCommenting, comment } } },
      { $push: { comments: { usernameCommenting, comment } } },
      { new: true }
    );

    if (!album) {
      return res.status(404).json({ error: "Album not found" });
    }

    console.log(album);
    res.status(200).json(album);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
};

module.exports = {
  getAlbums,
  getAlbum,
  createAlbum,
  deleteAlbum,
  updateAlbum,
};
